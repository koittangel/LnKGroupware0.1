<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 스프링 애노테이션 적용 범위 -->
	<context:component-scan base-package="com.lnk"></context:component-scan>
	
	<!-- Spring Security Login -->
	<sec:http auto-config="true" use-expressions="true">
		<sec:intercept-url pattern="/" access="permitAll"/>
		<sec:intercept-url pattern="/master/**" access="hasRole('ROLE_MASTER')" />
		<sec:intercept-url pattern="/lnk/**" 
			access="hasRole('ROLE_MASTER') or hasRole('ROLE_CEO') or hasRole('ROLE_DIRECTOR') or hasRole('ROLE_HEAD') or hasRole('ROLE_CHEIF') or hasRole('ROLE_STAFF')" />
		<sec:form-login login-page="/login.do"
						login-processing-url="/login-processing" 
						authentication-failure-url="/login.do?error=login"
						username-parameter="emp-no"
						password-parameter="password"
						/>
		<sec:access-denied-handler error-page="/access-denied.do" />
		<sec:csrf />								
	</sec:http>
	
	<!-- jdbc.properties 파일 불러오기 -->
	<context:property-placeholder location="/WEB-INF/resources/jdbc.properties" /> 
	
	<!-- jdbc.properties 내용을 이용해 DataSource Bean객체 생성 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="{jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
	</bean>
	
	<!-- Transaction 처리를 위해 TransactionManager Bean객체 생성 -->
	<bean id="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transaction 관련 annotation 사용하기 위해 
		위의 Bean객체를 Transaction-manager속성에 설정 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- MyBatis 사용을 위해 추가 1 (여러개의 mapper-*.xml 사용 위해) -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="/WEB-INF/resources/mybatis.xml" />
		<property name="mapperLocations">
			<array>
				<value>/WEB-INF/resources/mapper-*.xml</value>
			</array>
		</property>
	</bean>
	
	<!-- MyBatis 사용을 위해 추가 2 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
</beans>
